from fmpy import read_model_description, extract, instantiate_fmu
from fmpy.fmi2 import FMU2Slave

from System import *
from System.Collections.Generic import *
import shutil

class CarSimFMI():
    vrs_input_names = ['IMP_STEER_SW', 'IMP_THROTTLE_ENGINE', 'IMP_PCON_BK', 'IMP_GEAR_TRANS'
                 'IMP_DZDX_L1I', 'IMP_DZDX_L1O', 'IMP_DZDX_L2I', 'IMP_DZDX_L2O',
                 'IMP_DZDX_R1I', 'IMP_DZDX_R1O', 'IMP_DZDX_R2I', 'IMP_DZDX_R2O',
                 'IMP_DZDY_L1I', 'IMP_DZDY_L1O', 'IMP_DZDY_L2I', 'IMP_DZDY_L2O',
                 'IMP_DZDY_R1I', 'IMP_DZDY_R1O', 'IMP_DZDY_R2I', 'IMP_DZDY_R2O']
    vrs_output_names = ['Xo', 'Yo', 'Zo',
                        'Vx', 'Vy', 'Vz',
                        'Ax', 'Ay', 'Az',
                        'Roll', 'Pitch', 'Yaw',
                        'AVx', 'AVy', 'AVz',
                        'AAx', 'AAy', 'AAz',
                        'Z_L1', 'Z_L2', 'Z_R1', 'Z_R2']

    def __init__(self, fmu_path, start_time=0.0, step_size=0.001) -> None:
        self.fmu = None
        self.path = fmu_path
        self.start_time = start_time
        self.step_size = step_size
        self.current_time = start_time
        self.model_description = read_model_description(fmu_path)
        self.initialized = False

        self.vrs_input_dict, self.vrs_output_dict = self._get_variables()
        self._ininitialize()
        
    def _get_variables(self):
        vrs_input_dict = {}
        vrs_output_dict = {}

        for variable in self.model_description.modelVariables:
            if variable.name in self.vrs_input_names:
                vrs_input_dict[variable.name] = variable.valueReference
            elif variable.name in self.vrs_output_names:
                vrs_output_dict[variable.name] = variable.valueReference

        # if not vrs_input_dict or not vrs_output_dict:
        #     raise Exception("Required input or output variables not found in FMU variables.")
        return vrs_input_dict, vrs_output_dict
    
    def _ininitialize(self):
        # if self.fmu is not None:
        #     raise Exception("FMU is already initialized.")  
        
        unzipdir = extract(self.path)
        fmi_type = 'CoSimulation'

        # Create FMU instance
        # self.fmu = FMU2Slave(guid=self.model_description.guid,
        #                     unzipDirectory=unzipdir,
        #                     modelIdentifier=self.model_description.coSimulation.modelIdentifier,
        #                     instanceName='instane1')
        self.fmu = instantiate_fmu(unzipdir, self.model_description, fmi_type=fmi_type)

        # self.fmu.instantiate()
        self.fmu.setupExperiment(startTime=self.start_time)
        self.fmu.enterInitializationMode()
        self.fmu.exitInitializationMode()
        self.initialized = True

    def simulate(self, vrs_output_indicies):
        time = self.current_time
        self.fmu.doStep(currentCommunicationPoint=time,
                        communicationStepSize=self.step_size)
        self.current_time += self.step_size

        # output = self.fmu.getReal(vrs_output_indicies) # .NET List[Double]

        output = List[Double]()
        for i in vrs_output_indicies:
            output.Add(self.fmu.getReal([i])[0])

        # indices = list(vrs_output_indicies)
        # output = self.fmu.getReal(indices)

        return output
        
    def terminate(self):
        if self.fmu is not None:
            self.fmu.terminate()
            self.fmu.freeInstance()
            del self.fmu
            self.fmu = None
            # shutil.rmtree(self.unzipdir, ignore_errors=True)
            # self.unzipdir = str()
            # self.current_time = 0.0

    def get_vrs_input(self):
        vrs_input_dict_ = Dictionary[String, Int32]()
        for key, value in self.vrs_input_dict.items():
            vrs_input_dict_.Add(key,value)
        return vrs_input_dict_
    
    def get_vrs_output(self):
        vrs_output_dict_ = Dictionary[String, Int32]()
        for key, value in self.vrs_output_dict.items():
            vrs_output_dict_.Add(key,value)
        return vrs_output_dict_
    
def main():
    fmu_filename = 'FMI2_0717.fmu'

    carsim_fmi = CarSimFMI(fmu_filename)
    print("CarSimFMI instance created successfully.")

    stop_time = 60.0
    t = 0.0
    while t < stop_time:
        carsim_fmi.simulate(vrs_output_indicies=[25, 26, 27])  # Example output indices
        t += carsim_fmi.step_size

    carsim_fmi.terminate()
    print("FMU terminated successfully.")
    
if __name__ == "__main__":
    main()